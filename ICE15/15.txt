Problem:
The objective of this exercise is to implement the Template Method design pattern.
Please reuse the Observer project this time. If you can’t find it, here are the steps for the Observer pattern.

Observer pattern steps:
Create an interface called AlarmListener. This is the observer interface. In AlarmListener, there is a void alarm() method defined.

Create a class called SensorSystem. This is the publisher class. Define one instance variable 
ArrayList< AlarmListener > listeners = new ArrayList();
This ArrayList saves all the observers of this publisher.

In SensorSystem, define a method void register(AlarmListener alarmListener). What it does is to add alarmListener to the ArrayList listeners. 

In SensorSystem, define another method void soundTheAlarm(). What it does is to use a for loop to loop through all the listeners/observers in the ArrayList listeners, and call their alarm() method.

Different three concrete observer classes: Lighting, Gates and Surveillance. Make them implement the interface AlarmListener. Implement the alarm() method in all three classes. In Lighting, alarm() prints out “lights up”. In Gates, alarm() prints out “gates close”. In Surveillance, alarm() prints out “Surveillance – by the numbers:”.

Use the following client code to try it.
public class ObservserDemo {
    public static void main( String[] args ) {
        SensorSystem sensorSystem = new SensorSystem();
        sensorSystem.register(new Gates());
        sensorSystem.register(new Lighting());
        sensorSystem.register(new Surveillance());
        sensorSystem.soundTheAlarm();
    }
}

Template Method Design Pattern starts from here -->
In the same project, create a super class called CheckList that defines the algorithm.
class CheckList {
    // Template Method design pattern
    public void byTheNumbers() {
        localize();
        isolate();
        identify();
    }

    protected void localize() {
        System.out.println("   establish a perimeter");
    }

    protected void isolate() {
        System.out.println("   isolate the grid");
    }

    protected void identify() {
        System.out.println("   identify the source");
    }
}

Modify the original Surveillance class from: 
Class Surveillance implements AlarmListener {
To:
Class Surveillance extends CheckList implements AlarmListener {

In this way, Surveillance needs to provide a customized implementation other than the one in CheckList. Here we make the following changes to the previous implementation. Code that is underlined is what we need to add.

    public void alarm() {
        System.out.println("Surveillance - by the numbers:");
        byTheNumbers();
    }

    protected void isolate() {
        System.out.println("   train the cameras");
    }

Do not change the client, check what the output is.




Upload your code to the Blackboard when you are done.