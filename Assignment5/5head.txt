ASSIGNMENT 5 – Implementing the Decorator Design Pattern
 (with Strategy Pattern)

70 pts.
Due Tuesday, November 24th

Note: As specified in the course syllabus, you are encouraged to work with one partner on the assignments. Collaborative assignments will receive a 5% bonus credit. If you work collaboratively, you must list your collaborator’s name and provide a short summary of what each person did.

PROBLEM
You are to design and implement code based on the Decorator pattern for generating an appropriate receipt for a customer buying items at a particular Best Buy store. The general format of a receipt is as follows:
	Basic Receipt
	Store Header (store street address, phone number, state code, store number)
	Date of Sale
	Itemized Purchases
	Total Sale (without sales tax)
	Amount Due (with added sales tax)

	Dynamically-Added Items
		Tax Computation object (based on state residing in)
	Optional Secondary Headers (“Greetings”), e.g.,
		- “Happy Holidays from Best Buy”
		- “Summer Sales are Hot at Best Buy”
		Relevant Rebate Forms (to be printed at the end of the receipt)
 		Promotional Coupons (e.g., “10% off next purchase”)

APPROACH
We will assume that the code is written as part of the software used by all Best Buy stores around the country. Therefore, the information in the Store Header will vary depending on the particular store's location. In addition, the amount of sales tax (if any) is determined by the state that the store resides in. The calculation of tax will be implemented by use of the Strategy pattern. The added items to be displayed on each receipt will be handled by use of the Decorator pattern.

Basic Receipt
The information for the basic receipt should be stored in a BasicReceipt object (see below). The instance variables of a BasicReceipt should contain the date of sale, a PurchasedItems object, the total sale (without tax) and amount due (with added tax), each of type float. In addition, following the Strategy design pattern, there should be an instance variable of (interface) type TaxComputation that can be assigned the appropriate tax computation object (e.g., MDTaxComputation) for the state that the store resides in.

Determining Sales Tax
We will implement the classes so that the receipts can be generated for one of four possible store locations, each in a different state: Maryland (6% sales tax), California (7.5%), Massachusetts (6.25%), and Delaware (no sales tax). Note the following “sales tax holidays” of individual states:
Maryland
Has a sales tax holiday, but does not include computers or computer accessories.
California
No sales tax holidays.
Massachusetts
For the benefit of back-to-school shoppers, there is a sales tax holiday on the second weekend in August (for two days) which includes school supplies, computers, sports equipment, and health and beauty aids. The tax-free days on these items for 2016 will be August 13th and 14th.

The determination of sales tax is not just based on the tax rate and purchase amount, but also on the purchase date (because of the possible existence of tax holidays). That is why the method of tax computation is contained in a TaxComputation object by use of the Strategy pattern. (If there is no applicable sales tax, e.g., in Delaware, then the TaxComputation variable is set to null.) If an item is returned to a store in a different state from which the item was purchased in, the Receipt object retrieved from the system will have associated with it the TaxComputation object for the state that the items were purchased.


Adding Additional Receipt Items
There are a number of different “add on” items that may need to be printed with the basic receipt.

During particular times of the year, a receipt header may begin with a special greeting (e.g., “Happy Holidays from Best Buy”), called a secondary header, to be added to the top of a receipt. In addition, rebate forms may be printed at the end of a receipt if a purchased item has a mail-in rebate. Finally, coupons may be printed (also at the end of a receipt) if the total purchases exceeds a certain dollar amount (e.g., if spend over $100, get a 10% off coupon for the next visit).

Objects of interface type AddOn are used to store the added printout for a receipt. The interface has two methods - applies (which is passed a PurchasedItems object containing all of the items for the current receipt), and getLines (which returns the added lines of text to be printed as a single String with embedded newline characters). For AddOn objects of type SecondaryHeader, applies always returns true. This is because if a SecondaryHeader exists, it is always added to the (top) of the receipt. Since rebates only apply to a specific item, method applies returns true if and only if the particular item is found in PurchasedItems. A similar approach is taken for adding coupons to the end of a receipt, except that coupons apply if and only if the customer has spent over a certain amount.

We assume that each Best Buy store downloads the current set of decorator objects each morning. 

Configuration File
A configuration file will be read by the program at start up, to configure the system for the particular store location, containing the following information: store street address, store phone number, store number, and state code.

Factory Class
You must utilize a factory class to properly construct Best Buy receipts based on the information read from the configuration file, and the particular items purchased.

A UML class diagram for the design of this program is given below.

INTERFACES AND CLASSES TO UTILIZE
Following are the interface and classes to be used in the design of the program.

PROGRAM TO CREATE
Create a program that will create of and display Best Buy receipts. The program should provide a main menu as in the following,

		1 – Start New Receipt
		2 – Add Items
		3 – Display Receipt
			
Vary the AddOn objects stored in the ReceiptFactory to check that the factory builds the correct receipts for various situations (e.g., in which only a BasicReceipt is created; in which a Greeting AddOn exists; and in which various combinations of Coupon and Rebate AddOns exist).
WHAT TO TURN IN:  
Each of the source files, submitted as one zipped file. Please include sufficient screenshots and introduction to demonstrate how your programs run. 40% deduction if screenshots and introduction are not provided.
